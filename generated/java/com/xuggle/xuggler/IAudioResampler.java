/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
public class IAudioResampler extends RefCounted {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected IAudioResampler(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.IAudioResampler_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected IAudioResampler(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(XugglerJNI.IAudioResampler_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IAudioResampler obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IAudioResampler object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public IAudioResampler copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IAudioResampler(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IAudioResampler)
      equal = (((IAudioResampler)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
  public int getOutputChannels() {
    return XugglerJNI.IAudioResampler_getOutputChannels(swigCPtr, this);
  }

  public int getOutputRate() {
    return XugglerJNI.IAudioResampler_getOutputRate(swigCPtr, this);
  }

  public int getInputChannels() {
    return XugglerJNI.IAudioResampler_getInputChannels(swigCPtr, this);
  }

  public int getInputRate() {
    return XugglerJNI.IAudioResampler_getInputRate(swigCPtr, this);
  }

  public int resample(IAudioSamples outputSamples, IAudioSamples inputSamples, long numSamples) {
    return XugglerJNI.IAudioResampler_resample(swigCPtr, this, IAudioSamples.getCPtr(outputSamples), outputSamples, IAudioSamples.getCPtr(inputSamples), inputSamples, numSamples);
  }

  public static IAudioResampler make(int outputChannels, int inputChannels, int outputRate, int inputRate) {
    long cPtr = XugglerJNI.IAudioResampler_make__SWIG_0(outputChannels, inputChannels, outputRate, inputRate);
    return (cPtr == 0) ? null : new IAudioResampler(cPtr, false);
  }

  public IAudioSamples.Format getOutputFormat() {
    return IAudioSamples.Format.swigToEnum(XugglerJNI.IAudioResampler_getOutputFormat(swigCPtr, this));
  }

  public IAudioSamples.Format getInputFormat() {
    return IAudioSamples.Format.swigToEnum(XugglerJNI.IAudioResampler_getInputFormat(swigCPtr, this));
  }

  public int getFilterLen() {
    return XugglerJNI.IAudioResampler_getFilterLen(swigCPtr, this);
  }

  public int getLog2PhaseCount() {
    return XugglerJNI.IAudioResampler_getLog2PhaseCount(swigCPtr, this);
  }

  public boolean isLinear() {
    return XugglerJNI.IAudioResampler_isLinear(swigCPtr, this);
  }

  public double getCutoffFrequency() {
    return XugglerJNI.IAudioResampler_getCutoffFrequency(swigCPtr, this);
  }

  public static IAudioResampler make(int outputChannels, int inputChannels, int outputRate, int inputRate, IAudioSamples.Format outputFmt, IAudioSamples.Format inputFmt) {
    long cPtr = XugglerJNI.IAudioResampler_make__SWIG_1(outputChannels, inputChannels, outputRate, inputRate, outputFmt.swigValue(), inputFmt.swigValue());
    return (cPtr == 0) ? null : new IAudioResampler(cPtr, false);
  }

  public static IAudioResampler make(int outputChannels, int inputChannels, int outputRate, int inputRate, IAudioSamples.Format outputFmt, IAudioSamples.Format inputFmt, int filterLen, int log2PhaseCount, boolean isLinear, double cutoffFrequency) {
    long cPtr = XugglerJNI.IAudioResampler_make__SWIG_2(outputChannels, inputChannels, outputRate, inputRate, outputFmt.swigValue(), inputFmt.swigValue(), filterLen, log2PhaseCount, isLinear, cutoffFrequency);
    return (cPtr == 0) ? null : new IAudioResampler(cPtr, false);
  }

  public int getMinimumNumSamplesRequiredInOutputSamples(IAudioSamples inSamples) {
    return XugglerJNI.IAudioResampler_getMinimumNumSamplesRequiredInOutputSamples__SWIG_0(swigCPtr, this, IAudioSamples.getCPtr(inSamples), inSamples);
  }

  public int getMinimumNumSamplesRequiredInOutputSamples(int numSamples) {
    return XugglerJNI.IAudioResampler_getMinimumNumSamplesRequiredInOutputSamples__SWIG_1(swigCPtr, this, numSamples);
  }

}
