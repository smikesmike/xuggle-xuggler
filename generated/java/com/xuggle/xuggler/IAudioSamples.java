/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
public class IAudioSamples extends IMediaData {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected IAudioSamples(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.IAudioSamples_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected IAudioSamples(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(XugglerJNI.IAudioSamples_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IAudioSamples obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IAudioSamples object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public IAudioSamples copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IAudioSamples(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IAudioSamples)
      equal = (((IAudioSamples)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  

  /**
   * info about this packet
   * @return information about this packet
   */
   
  @Override
  public String toString()
  {
    StringBuilder result = new StringBuilder();
    
    result.append(this.getClass().getName()+"@"+hashCode()+"[");
    result.append("sample rate:"+getSampleRate()+";");
    result.append("channels:"+getChannels()+";");
    result.append("format:"+getFormat()+";");
    result.append("time stamp:"+getTimeStamp()+";");
    result.append("complete:"+isComplete()+";");
    result.append("num samples:"+getNumSamples()+";");
    result.append("size:"+getSize()+";");
    result.append("key:"+isKey()+";");
    IRational timeBase = IRational.make(1,(int)Global.DEFAULT_PTS_PER_SECOND);
    result.append("time base:"+timeBase+";");
    if (timeBase != null) timeBase.delete();
    result.append("]");
    return result.toString();
  }


  public boolean isComplete() {
    return XugglerJNI.IAudioSamples_isComplete(swigCPtr, this);
  }

  public int getSampleRate() {
    return XugglerJNI.IAudioSamples_getSampleRate(swigCPtr, this);
  }

  public int getChannels() {
    return XugglerJNI.IAudioSamples_getChannels(swigCPtr, this);
  }

  public long getSampleBitDepth() {
    return XugglerJNI.IAudioSamples_getSampleBitDepth(swigCPtr, this);
  }

  public IAudioSamples.Format getFormat() {
    return IAudioSamples.Format.swigToEnum(XugglerJNI.IAudioSamples_getFormat(swigCPtr, this));
  }

  public long getNumSamples() {
    return XugglerJNI.IAudioSamples_getNumSamples(swigCPtr, this);
  }

  public long getMaxBufferSize() {
    return XugglerJNI.IAudioSamples_getMaxBufferSize(swigCPtr, this);
  }

  public long getMaxSamples() {
    return XugglerJNI.IAudioSamples_getMaxSamples(swigCPtr, this);
  }

  public long getSampleSize() {
    return XugglerJNI.IAudioSamples_getSampleSize(swigCPtr, this);
  }

  public long getPts() {
    return XugglerJNI.IAudioSamples_getPts(swigCPtr, this);
  }

  public void setPts(long aValue) {
    XugglerJNI.IAudioSamples_setPts(swigCPtr, this, aValue);
  }

  public long getNextPts() {
    return XugglerJNI.IAudioSamples_getNextPts(swigCPtr, this);
  }

  public void setComplete(boolean complete, long numSamples, int sampleRate, int channels, IAudioSamples.Format format, long pts) {
    XugglerJNI.IAudioSamples_setComplete(swigCPtr, this, complete, numSamples, sampleRate, channels, format.swigValue(), pts);
  }

  public int setSample(long sampleIndex, int channel, IAudioSamples.Format format, int sample) {
    return XugglerJNI.IAudioSamples_setSample(swigCPtr, this, sampleIndex, channel, format.swigValue(), sample);
  }

  public int getSample(long sampleIndex, int channel, IAudioSamples.Format format) {
    return XugglerJNI.IAudioSamples_getSample(swigCPtr, this, sampleIndex, channel, format.swigValue());
  }

  public static long findSampleBitDepth(IAudioSamples.Format format) {
    return XugglerJNI.IAudioSamples_findSampleBitDepth(format.swigValue());
  }

  public static IAudioSamples make(long numSamples, long numChannels) {
    long cPtr = XugglerJNI.IAudioSamples_make__SWIG_0(numSamples, numChannels);
    return (cPtr == 0) ? null : new IAudioSamples(cPtr, false);
  }

  public static long samplesToDefaultPts(long samples, int sampleRate) {
    return XugglerJNI.IAudioSamples_samplesToDefaultPts(samples, sampleRate);
  }

  public static long defaultPtsToSamples(long duration, int sampleRate) {
    return XugglerJNI.IAudioSamples_defaultPtsToSamples(duration, sampleRate);
  }

  public static IAudioSamples make(IBuffer buffer, int channels, IAudioSamples.Format format) {
    long cPtr = XugglerJNI.IAudioSamples_make__SWIG_1(IBuffer.getCPtr(buffer), buffer, channels, format.swigValue());
    return (cPtr == 0) ? null : new IAudioSamples(cPtr, false);
  }

  public static IAudioSamples make(long numSamples, long numChannels, IAudioSamples.Format format) {
    long cPtr = XugglerJNI.IAudioSamples_make__SWIG_2(numSamples, numChannels, format.swigValue());
    return (cPtr == 0) ? null : new IAudioSamples(cPtr, false);
  }

  public enum Format {
    FMT_NONE(XugglerJNI.IAudioSamples_FMT_NONE_get()),
    FMT_U8,
    FMT_S16,
    FMT_S32,
    FMT_FLT,
    FMT_DBL,
    FMT_U8P,
    FMT_S16P,
    FMT_S32P,
    FMT_FLTP,
    FMT_DBLP;

    public final int swigValue() {
      return swigValue;
    }

    public static Format swigToEnum(int swigValue) {
      Format[] swigValues = Format.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Format swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Format.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Format() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Format(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Format(Format swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum ChannelLayout {
    CH_FRONT_LEFT(XugglerJNI.IAudioSamples_CH_FRONT_LEFT_get()),
    CH_FRONT_RIGHT(XugglerJNI.IAudioSamples_CH_FRONT_RIGHT_get()),
    CH_FRONT_CENTER(XugglerJNI.IAudioSamples_CH_FRONT_CENTER_get()),
    CH_LOW_FREQUENCY(XugglerJNI.IAudioSamples_CH_LOW_FREQUENCY_get()),
    CH_BACK_LEFT(XugglerJNI.IAudioSamples_CH_BACK_LEFT_get()),
    CH_BACK_RIGHT(XugglerJNI.IAudioSamples_CH_BACK_RIGHT_get()),
    CH_FRONT_LEFT_OF_CENTER(XugglerJNI.IAudioSamples_CH_FRONT_LEFT_OF_CENTER_get()),
    CH_FRONT_RIGHT_OF_CENTER(XugglerJNI.IAudioSamples_CH_FRONT_RIGHT_OF_CENTER_get()),
    CH_BACK_CENTER(XugglerJNI.IAudioSamples_CH_BACK_CENTER_get()),
    CH_SIDE_LEFT(XugglerJNI.IAudioSamples_CH_SIDE_LEFT_get()),
    CH_SIDE_RIGHT(XugglerJNI.IAudioSamples_CH_SIDE_RIGHT_get()),
    CH_TOP_CENTER(XugglerJNI.IAudioSamples_CH_TOP_CENTER_get()),
    CH_TOP_FRONT_LEFT(XugglerJNI.IAudioSamples_CH_TOP_FRONT_LEFT_get()),
    CH_TOP_FRONT_CENTER(XugglerJNI.IAudioSamples_CH_TOP_FRONT_CENTER_get()),
    CH_TOP_FRONT_RIGHT(XugglerJNI.IAudioSamples_CH_TOP_FRONT_RIGHT_get()),
    CH_TOP_BACK_LEFT(XugglerJNI.IAudioSamples_CH_TOP_BACK_LEFT_get()),
    CH_TOP_BACK_CENTER(XugglerJNI.IAudioSamples_CH_TOP_BACK_CENTER_get()),
    CH_TOP_BACK_RIGHT(XugglerJNI.IAudioSamples_CH_TOP_BACK_RIGHT_get()),
    CH_STEREO_LEFT(XugglerJNI.IAudioSamples_CH_STEREO_LEFT_get()),
    CH_STEREO_RIGHT(XugglerJNI.IAudioSamples_CH_STEREO_RIGHT_get()),
    CH_LAYOUT_MONO(XugglerJNI.IAudioSamples_CH_LAYOUT_MONO_get()),
    CH_LAYOUT_STEREO(XugglerJNI.IAudioSamples_CH_LAYOUT_STEREO_get()),
    CH_LAYOUT_2_1(XugglerJNI.IAudioSamples_CH_LAYOUT_2_1_get()),
    CH_LAYOUT_SURROUND(XugglerJNI.IAudioSamples_CH_LAYOUT_SURROUND_get()),
    CH_LAYOUT_4POINT0(XugglerJNI.IAudioSamples_CH_LAYOUT_4POINT0_get()),
    CH_LAYOUT_2_2(XugglerJNI.IAudioSamples_CH_LAYOUT_2_2_get()),
    CH_LAYOUT_QUAD(XugglerJNI.IAudioSamples_CH_LAYOUT_QUAD_get()),
    CH_LAYOUT_5POINT0(XugglerJNI.IAudioSamples_CH_LAYOUT_5POINT0_get()),
    CH_LAYOUT_5POINT1(XugglerJNI.IAudioSamples_CH_LAYOUT_5POINT1_get()),
    CH_LAYOUT_5POINT0_BACK(XugglerJNI.IAudioSamples_CH_LAYOUT_5POINT0_BACK_get()),
    CH_LAYOUT_5POINT1_BACK(XugglerJNI.IAudioSamples_CH_LAYOUT_5POINT1_BACK_get()),
    CH_LAYOUT_7POINT1(XugglerJNI.IAudioSamples_CH_LAYOUT_7POINT1_get()),
    CH_LAYOUT_7POINT1_WIDE(XugglerJNI.IAudioSamples_CH_LAYOUT_7POINT1_WIDE_get()),
    CH_LAYOUT_STEREO_DOWNMIX(XugglerJNI.IAudioSamples_CH_LAYOUT_STEREO_DOWNMIX_get());

    public final int swigValue() {
      return swigValue;
    }

    public static ChannelLayout swigToEnum(int swigValue) {
      ChannelLayout[] swigValues = ChannelLayout.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (ChannelLayout swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + ChannelLayout.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private ChannelLayout() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private ChannelLayout(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private ChannelLayout(ChannelLayout swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
