/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
public class IIndexEntry extends RefCounted {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected IIndexEntry(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.IIndexEntry_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected IIndexEntry(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(XugglerJNI.IIndexEntry_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IIndexEntry obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IIndexEntry object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public IIndexEntry copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IIndexEntry(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IIndexEntry)
      equal = (((IIndexEntry)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
   /**
   * info about this entry.
   * @return information about this entry.
   */
   
  @Override
  public String toString()
  {
    StringBuilder result = new StringBuilder();
    
    result.append(this.getClass().getName()+"@"+hashCode()+"[");
    result.append("position:"+getPosition()+";");
    result.append("timestamp:"+getTimeStamp()+";");
    result.append("flags:"+getFlags()+";");
    result.append("size:"+getSize()+";");
    result.append("min-distance:"+getMinDistance()+";");
    result.append("]");
    return result.toString();
  }

 

  public static IIndexEntry make(long position, long timeStamp, int flags, int size, int minDistance) {
    long cPtr = XugglerJNI.IIndexEntry_make(position, timeStamp, flags, size, minDistance);
    return (cPtr == 0) ? null : new IIndexEntry(cPtr, false);
  }

  public long getPosition() {
    return XugglerJNI.IIndexEntry_getPosition(swigCPtr, this);
  }

  public long getTimeStamp() {
    return XugglerJNI.IIndexEntry_getTimeStamp(swigCPtr, this);
  }

  public int getFlags() {
    return XugglerJNI.IIndexEntry_getFlags(swigCPtr, this);
  }

  public int getSize() {
    return XugglerJNI.IIndexEntry_getSize(swigCPtr, this);
  }

  public int getMinDistance() {
    return XugglerJNI.IIndexEntry_getMinDistance(swigCPtr, this);
  }

  public boolean isKeyFrame() {
    return XugglerJNI.IIndexEntry_isKeyFrame(swigCPtr, this);
  }

  public final static int IINDEX_FLAG_KEYFRAME = XugglerJNI.IIndexEntry_IINDEX_FLAG_KEYFRAME_get();
}
