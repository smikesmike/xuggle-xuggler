/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.ferry;

public class IBuffer extends RefCounted {
  // IBuffer.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>

  private volatile long swigCPtr;

  /**
   * <strong>
   * DO NOT USE THIS CONSTRUCTOR - USE {@link #make(RefCounted,int)} INSTEAD.
   * </strong>
   * <p>
   * Internal Only. Do not allocate this object using new.  Not part of public API.
   * </p>
   * <p>
   * Unfortunately this constructor is public because the internal
   * implementation needs it to be, but do not pass in values to this method
   * as you may end up crashing the virtual machine.
   * </p>
   *
   * @param ignore1 ignore.
   * @param ignore2 ignore.
   *
   */ 
  public IBuffer(long ignore1, boolean ignore2) {
    super(FerryJNI.IBuffer_SWIGUpcast(ignore1), ignore2);
    swigCPtr = ignore1;
  }
  protected IBuffer(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(FerryJNI.IBuffer_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IBuffer obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Releases ths instance of IBuffer and frees any underlying
   * native memory.
   * <p>
   * {@inheritDoc}
   * </p> 
   */
  @Override
  public void delete()
  {
    do {} while(false); // remove a warning
    super.delete();
  }
  
  /**
   * Create a new IBuffer object that is actually referring to the
   * exact same underlying Native object.
   *
   * @return the new Java object.
   */
  @Override
  public IBuffer copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IBuffer(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IBuffer)
      equal = (((IBuffer)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  

  private void validateArgs(Object array, int arrayLength,
      int arrayPos,
      int bufferSize,
      int bufferPos,
      int length)
  {
    if (arrayPos < 0)
      throw new IndexOutOfBoundsException();
    if (bufferPos < 0)
      throw new IndexOutOfBoundsException();
    if (length < 0)
      throw new IndexOutOfBoundsException();
    if (arrayPos+length > arrayLength)
      throw new IndexOutOfBoundsException();
    if (bufferPos + length > bufferSize)
      throw new IndexOutOfBoundsException();
  }
  
  /**
   * Absolute bulk put method.
   * <p>
   * This method transfers bytes into this buffer from the given source array.
   * If there are more bytes to be copied from the array than there is
   * space remaining at the specified destination offset,
   * then no bytes are transferred and a java.nio.BufferOverflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and copying the bytes over, but is more efficient in
   * the {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param src The array from which bytes are to be read.  Must be non null.
   * @param srcPos The offset within <code>src</code> of the first byte to be read;
   *   must be non-negative and less than <code>src.length</code>
   * @param destPos The offset in the IBuffer where you want to copy
   *   data to.  Must be non-negative and less than <code>getBufferSize()</code>
   * @param length The number of bytes to be read from <code>src</code>;
   *  must be non-negative and no larger than <code>src.length - srcPos</code>
   *  
   * @throws NullPointerException if <code>src</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *   mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient space
   *   in this {@link IBuffer}.
   *   
   */
  public void put(byte[] src, int srcPos, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer buffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (buffer == null)
        return;
      buffer.clear();
      validateArgs(src, src.length, srcPos, buffer.limit(), destPos, length);
      
      buffer.position(destPos);
      buffer.put(src, srcPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk get method.
   * <p>
   * This method transfers bytes from this {@link IBuffer} into the given
   * <code>dest</code>
   * array. If there are fewer bytes in the {@link IBuffer} starting
   * at position <code>srcPos</code> than are required
   * to satisfy the request, then no bytes are
   * transferred and a BufferUnderflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and reading the bytes out, but is more efficient in the
   * {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param srcPos The offset in the IBuffer where you want to start
   *        copying data from.
   *        Must be non-negative and less than <code>getBufferSize()</code>
   * @param dest The array to which bytes are to be written. Must be non null.
   * @param destPos The offset within <code>dest</code> of the first byte to be
   *        written; must be non-negative and less than <code>dest.length</code>
   * @param length The number of bytes to be copied into <code>dest</code>; must be
   *        non-negative and no larger than <code>dest.length - destPos</code>
   * 
   * @throws NullPointerException if <code>dest</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *         mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient data in this
   *         {@link IBuffer} to satisfy the request.
   * 
   */
  public void get(int srcPos, byte[] dest, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer buffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (buffer == null)
        return;
      validateArgs(dest, dest.length, destPos, buffer.limit(), srcPos, length);
      
      buffer.position(srcPos);
      buffer.get(dest, destPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk put method.
   * <p>
   * This method transfers shorts into this buffer from the given source array.
   * If there are more shorts to be copied from the array than there is
   * space remaining at the specified destination offset,
   * then no shorts are transferred and a java.nio.BufferOverflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and copying the bytes over, but is more efficient in
   * the {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param src The array from which shorts are to be read.  Must be non null.
   * @param srcPos The offset within <code>src</code> of the first short to be read;
   *   must be non-negative and less than <code>src.length</code>
   * @param destPos The offset in the IBuffer where you want to copy
   *   data to.  Must be non-negative and less than <code>getBufferSize()</code>
   * @param length The number of shorts to be read from <code>src</code>;
   *  must be non-negative and no larger than <code>src.length - srcPos</code>
   *  
   * @throws NullPointerException if <code>src</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *   mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient space
   *   in this {@link IBuffer}.
   *   
   */
  public void put(short[] src, int srcPos, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.ShortBuffer buffer = bbuffer.asShortBuffer();
      buffer.clear();
      validateArgs(src, src.length, srcPos, buffer.limit(), destPos, length);
      buffer.position(destPos);
      buffer.put(src, srcPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk get method.
   * <p>
   * This method transfers shorts from this {@link IBuffer} into the given
   * <code>dest</code>
   * array. If there are fewer shorts in the {@link IBuffer} starting
   * at position <code>srcPos</code> than are required
   * to satisfy the request, then no shorts are
   * transferred and a BufferUnderflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and reading the bytes out, but is more efficient in the
   * {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param srcPos The offset in the IBuffer where you want to start
   *        copying data from.
   *        Must be non-negative and less than <code>getBufferSize()</code>
   * @param dest The array to which shorts are to be written. Must be non null.
   * @param destPos The offset within <code>dest</code> of the first short to be
   *        written; must be non-negative and less than <code>dest.length</code>
   * @param length The number of shorts to be copied into <code>dest</code>; must be
   *        non-negative and no larger than <code>dest.length - destPos</code>
   * 
   * @throws NullPointerException if <code>dest</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *         mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient data in this
   *         {@link IBuffer} to satisfy the request.
   * 
   */
  public void get(int srcPos, short[] dest, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.ShortBuffer buffer = bbuffer.asShortBuffer();
      validateArgs(dest, dest.length, destPos, buffer.limit(), srcPos, length);
      buffer.position(srcPos);
      buffer.get(dest, destPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  
  /**
   * Absolute bulk put method.
   * <p>
   * This method transfers ints into this buffer from the given source array.
   * If there are more ints to be copied from the array than there is
   * space remaining at the specified destination offset,
   * then no ints are transferred and a java.nio.BufferOverflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and copying the bytes over, but is more efficient in
   * the {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param src The array from which ints are to be read.  Must be non null.
   * @param srcPos The offset within <code>src</code> of the first int to be read;
   *   must be non-negative and less than <code>src.length</code>
   * @param destPos The offset in the IBuffer where you want to copy
   *   data to.  Must be non-negative and less than <code>getBufferSize()</code>
   * @param length The number of ints to be read from <code>src</code>;
   *  must be non-negative and no larger than <code>src.length - srcPos</code>
   *  
   * @throws NullPointerException if <code>src</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *   mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient space
   *   in this {@link IBuffer}.
   *   
   */
  public void put(int[] src, int srcPos, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.IntBuffer buffer = bbuffer.asIntBuffer();
      buffer.clear();
      validateArgs(src, src.length, srcPos, buffer.limit(), destPos, length);
      buffer.position(destPos);
      buffer.put(src, srcPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk get method.
   * <p>
   * This method transfers ints from this {@link IBuffer} into the given
   * <code>dest</code>
   * array. If there are fewer ints in the {@link IBuffer} starting
   * at position <code>srcPos</code> than are required
   * to satisfy the request, then no ints are
   * transferred and a BufferUnderflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and reading the bytes out, but is more efficient in the
   * {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param srcPos The offset in the IBuffer where you want to start
   *        copying data from.
   *        Must be non-negative and less than <code>getBufferSize()</code>
   * @param dest The array to which ints are to be written. Must be non null.
   * @param destPos The offset within <code>dest</code> of the first int to be
   *        written; must be non-negative and less than <code>dest.length</code>
   * @param length The number of ints to be copied into <code>dest</code>; must be
   *        non-negative and no larger than <code>dest.length - destPos</code>
   * 
   * @throws NullPointerException if <code>dest</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *         mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient data in this
   *         {@link IBuffer} to satisfy the request.
   * 
   */
  public void get(int srcPos, int[] dest, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.IntBuffer buffer = bbuffer.asIntBuffer();
      validateArgs(dest, dest.length, destPos, buffer.limit(), srcPos, length);
      buffer.position(srcPos);
      buffer.get(dest, destPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }


  /**
   * Absolute bulk put method.
   * <p>
   * This method transfers longs into this buffer from the given source array.
   * If there are more longs to be copied from the array than there is
   * space remaining at the specified destination offset,
   * then no longs are transferred and a java.nio.BufferOverflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and copying the bytes over, but is more efficient in
   * the {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param src The array from which longs are to be read.  Must be non null.
   * @param srcPos The offset within <code>src</code> of the first long to be read;
   *   must be non-negative and less than <code>src.length</code>
   * @param destPos The offset in the IBuffer where you want to copy
   *   data to.  Must be non-negative and less than <code>getBufferSize()</code>
   * @param length The number of longs to be read from <code>src</code>;
   *  must be non-negative and no larger than <code>src.length - srcPos</code>
   *  
   * @throws NullPointerException if <code>src</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *   mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient space
   *   in this {@link IBuffer}.
   *   
   */
  public void put(long[] src, int srcPos, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.LongBuffer buffer = bbuffer.asLongBuffer();
      buffer.clear();
      validateArgs(src, src.length, srcPos, buffer.limit(), destPos, length);
      buffer.position(destPos);
      buffer.put(src, srcPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk get method.
   * <p>
   * This method transfers longs from this {@link IBuffer} into the given
   * <code>dest</code>
   * array. If there are fewer longs in the {@link IBuffer} starting
   * at position <code>srcPos</code> than are required
   * to satisfy the request, then no longs are
   * transferred and a BufferUnderflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and reading the bytes out, but is more efficient in the
   * {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param srcPos The offset in the IBuffer where you want to start
   *        copying data from.
   *        Must be non-negative and less than <code>getBufferSize()</code>
   * @param dest The array to which longs are to be written. Must be non null.
   * @param destPos The offset within <code>dest</code> of the first long to be
   *        written; must be non-negative and less than <code>dest.length</code>
   * @param length The number of longs to be copied into <code>dest</code>; must be
   *        non-negative and no larger than <code>dest.length - destPos</code>
   * 
   * @throws NullPointerException if <code>dest</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *         mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient data in this
   *         {@link IBuffer} to satisfy the request.
   * 
   */
  public void get(int srcPos, long[] dest, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.LongBuffer buffer = bbuffer.asLongBuffer();
      validateArgs(dest, dest.length, destPos, buffer.limit(), srcPos, length);
      buffer.position(srcPos);
      buffer.get(dest, destPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }
  
  /**
   * Absolute bulk put method.
   * <p>
   * This method transfers doubles into this buffer from the given source array.
   * If there are more doubles to be copied from the array than there is
   * space remaining at the specified destination offset,
   * then no doubles are transferred and a java.nio.BufferOverflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and copying the bytes over, but is more efficient in
   * the {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param src The array from which doubles are to be read.  Must be non null.
   * @param srcPos The offset within <code>src</code> of the first double to be read;
   *   must be non-negative and less than <code>src.length</code>
   * @param destPos The offset in the IBuffer where you want to copy
   *   data to.  Must be non-negative and less than <code>getBufferSize()</code>
   * @param length The number of doubles to be read from <code>src</code>;
   *  must be non-negative and no larger than <code>src.length - srcPos</code>
   *  
   * @throws NullPointerException if <code>src</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *   mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient space
   *   in this {@link IBuffer}.
   *   
   */
  public void put(double[] src, int srcPos, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.DoubleBuffer buffer = bbuffer.asDoubleBuffer();
      buffer.clear();
      validateArgs(src, src.length, srcPos, buffer.limit(), destPos, length);
      buffer.position(destPos);
      buffer.put(src, srcPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk get method.
   * <p>
   * This method transfers doubles from this {@link IBuffer} into the given
   * <code>dest</code>
   * array. If there are fewer doubles in the {@link IBuffer} starting
   * at position <code>srcPos</code> than are required
   * to satisfy the request, then no doubles are
   * transferred and a BufferUnderflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and reading the bytes out, but is more efficient in the
   * {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param srcPos The offset in the IBuffer where you want to start
   *        copying data from.
   *        Must be non-negative and less than <code>getBufferSize()</code>
   * @param dest The array to which doubles are to be written. Must be non null.
   * @param destPos The offset within <code>dest</code> of the first double to be
   *        written; must be non-negative and less than <code>dest.length</code>
   * @param length The number of doubles to be copied into <code>dest</code>; must be
   *        non-negative and no larger than <code>dest.length - destPos</code>
   * 
   * @throws NullPointerException if <code>dest</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *         mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient data in this
   *         {@link IBuffer} to satisfy the request.
   * 
   */
  public void get(int srcPos, double[] dest, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.DoubleBuffer buffer = bbuffer.asDoubleBuffer();
      validateArgs(dest, dest.length, destPos, buffer.limit(), srcPos, length);
      buffer.position(srcPos);
      buffer.get(dest, destPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk put method.
   * <p>
   * This method transfers floats into this buffer from the given source array.
   * If there are more floats to be copied from the array than there is
   * space remaining at the specified destination offset,
   * then no floats are transferred and a java.nio.BufferOverflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and copying the bytes over, but is more efficient in
   * the {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param src The array from which floats are to be read.  Must be non null.
   * @param srcPos The offset within <code>src</code> of the first float to be read;
   *   must be non-negative and less than <code>src.length</code>
   * @param destPos The offset in the IBuffer where you want to copy
   *   data to.  Must be non-negative and less than <code>getBufferSize()</code>
   * @param length The number of floats to be read from <code>src</code>;
   *  must be non-negative and no larger than <code>src.length - srcPos</code>
   *  
   * @throws NullPointerException if <code>src</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *   mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient space
   *   in this {@link IBuffer}.
   *   
   */
  public void put(float[] src, int srcPos, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.FloatBuffer buffer = bbuffer.asFloatBuffer();
      buffer.clear();
      validateArgs(src, src.length, srcPos, buffer.limit(), destPos, length);
      buffer.position(destPos);
      buffer.put(src, srcPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk get method.
   * <p>
   * This method transfers floats from this {@link IBuffer} into the given
   * <code>dest</code>
   * array. If there are fewer floats in the {@link IBuffer} starting
   * at position <code>srcPos</code> than are required
   * to satisfy the request, then no floats are
   * transferred and a BufferUnderflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and reading the bytes out, but is more efficient in the
   * {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param srcPos The offset in the IBuffer where you want to start
   *        copying data from.
   *        Must be non-negative and less than <code>getBufferSize()</code>
   * @param dest The array to which floats are to be written. Must be non null.
   * @param destPos The offset within <code>dest</code> of the first float to be
   *        written; must be non-negative and less than <code>dest.length</code>
   * @param length The number of floats to be copied into <code>dest</code>; must be
   *        non-negative and no larger than <code>dest.length - destPos</code>
   * 
   * @throws NullPointerException if <code>dest</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *         mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient data in this
   *         {@link IBuffer} to satisfy the request.
   * 
   */
  public void get(int srcPos, float[] dest, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.FloatBuffer buffer = bbuffer.asFloatBuffer();
      validateArgs(dest, dest.length, destPos, buffer.limit(), srcPos, length);
      buffer.position(srcPos);
      buffer.get(dest, destPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk put method.
   * <p>
   * This method transfers chars into this buffer from the given source array.
   * If there are more chars to be copied from the array than there is
   * space remaining at the specified destination offset,
   * then no chars are transferred and a java.nio.BufferOverflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and copying the bytes over, but is more efficient in
   * the {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param src The array from which chars are to be read.  Must be non null.
   * @param srcPos The offset within <code>src</code> of the first char to be read;
   *   must be non-negative and less than <code>src.length</code>
   * @param destPos The offset in the IBuffer where you want to copy
   *   data to.  Must be non-negative and less than <code>getBufferSize()</code>
   * @param length The number of chars to be read from <code>src</code>;
   *  must be non-negative and no larger than <code>src.length - srcPos</code>
   *  
   * @throws NullPointerException if <code>src</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *   mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient space
   *   in this {@link IBuffer}.
   *   
   */
  public void put(char[] src, int srcPos, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.CharBuffer buffer = bbuffer.asCharBuffer();
      buffer.clear();
      validateArgs(src, src.length, srcPos, buffer.limit(), destPos, length);
      buffer.position(destPos);
      buffer.put(src, srcPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }

  /**
   * Absolute bulk get method.
   * <p>
   * This method transfers chars from this {@link IBuffer} into the given
   * <code>dest</code>
   * array. If there are fewer chars in the {@link IBuffer} starting
   * at position <code>srcPos</code> than are required
   * to satisfy the request, then no chars are
   * transferred and a BufferUnderflowException is thrown.
   * </p>
   * <p>
   * This method is equivalent to calling {@link #getByteBuffer(int, int)}
   * yourself and reading the bytes out, but is more efficient in the
   * {@link JNIMemoryManager.MemoryModel#NATIVE_BUFFERS} memory model.
   * </p>
   * 
   * @param srcPos The offset in the IBuffer where you want to start
   *        copying data from.
   *        Must be non-negative and less than <code>getBufferSize()</code>
   * @param dest The array to which chars are to be written. Must be non null.
   * @param destPos The offset within <code>dest</code> of the first char to be
   *        written; must be non-negative and less than <code>dest.length</code>
   * @param length The number of chars to be copied into <code>dest</code>; must be
   *        non-negative and no larger than <code>dest.length - destPos</code>
   * 
   * @throws NullPointerException if <code>dest</code> is null.
   * @throws IndexOutOfBoundsException if the preconditions on the arguments
   *         mentioned above are not honored.
   * @throws java.nio.BufferOverflowException if there is insufficient data in this
   *         {@link IBuffer} to satisfy the request.
   * 
   */
  public void get(int srcPos, char[] dest, int destPos, int length)
  {
    java.util.concurrent.atomic.AtomicReference<JNIReference> ref =
      new java.util.concurrent.atomic.AtomicReference<JNIReference>();
    java.nio.ByteBuffer bbuffer = this.getByteBuffer(0, this.getBufferSize(),
        ref);
    
    try
    {
      if (bbuffer == null)
        return;
      java.nio.CharBuffer buffer = bbuffer.asCharBuffer();
      validateArgs(dest, dest.length, destPos, buffer.limit(), srcPos, length);
      buffer.position(srcPos);
      buffer.get(dest, destPos, length);
      return;
    }
    finally
    {
      if (ref.get() != null)
        ref.get().delete();
    }
  }


  /**
   * Returns up to length bytes, starting at offset in the underlying
   * buffer we're managing.
   *
   * <p> 
   * 
   * The buffer position, mark are initialized to zero and limit
   * is set to the maximum capacity of this buffer.  For some
   * IBuffer contents, the actual usable data in this buffer will
   * be less that the limit.
   * 
   * </p>
   * <p>
   * If you want to control exactly when the underlying memory
   * beyind the returned {@link java.nio.ByteBuffer} is released,
   * use {@link #getByteBuffer(int, int, java.util.concurrent.atomic.AtomicReference)}.
   * </p>
   * @see #getByteBuffer(int, int, java.util.concurrent.atomic.AtomicReference)
   */
  public java.nio.ByteBuffer getByteBuffer(int offset, int length)
  {
    return getByteBuffer(offset, length, null);
  }

  

    /**
     * Returns up to length bytes, starting at offset in the underlying
     * buffer we're managing, and also passed back a {@link JNIReference}
     * that can optionally be used by the caller to free the underlying
     * native memory.
     *
     * <p> 
     * 
     * The buffer position, mark are initialized to zero and limit
     * is set to the maximum capacity of this buffer.  For some
     * IBuffer contents, the actual usable data in this buffer will
     * be less that the limit.
     * 
     * </p>
     * <p>
     *
     * If you use this method you are accessing the direct native
     * memory associated with this buffer.  That means changes you make
     * to this buffer are immediately reflected in the underlying
     * memory.
     *    
     * </p>
     * <p>
     *
     * Once you call this method,
     * the underlying native memory allocated will not be released until
     * all references to the returned ByteBuffer are no longer reachable and
     * at least one call to {@link JNIMemoryManager#gc()} has been
     * performed.  You can force the memory to be collect earlier
     * by using the {@link JNIReference} value returned when you
     * call this method.
     * </p><p>
     *  The {@link JNIMemoryManager#gc()} is called whenever
     * xuggler tries to allocate new memory for any Xuggler interface,
     * so normally you don't need to care about this.  If for some
     * reason no other Xuggler object is ever allocated, every
     * Xuggler object has
     * a finalizer as well that will do the right thing.
     *
     * </p>
     * <p>
     *
     * You can also start up
     * a separate thread to do continuously do Ferry garabage
     * collections by calling
     * {@link JNIMemoryManager#startCollectionThread()}.  This thread
     * will only wake up when it has work to do, so the overhead
     * is very low.  We don't turn it on by default since in
     * 99.999% of cases you don't need to worry about it.
     *  
     * </p>
     * 
     * @param offset The offset (in bytes) into the buffer managed by
     *   this IBuffer
     * @param length The requested length (in bytes) you want to access.
     *   The buffer returned may actually be longer than length.
     * @param referenceReturn If non null, on exit 
     *   calling {@link java.util.concurrent.atomic.AtomicReference#get()}
     *   on this value will return a {@link JNIReference} you can use
     *   for explicitly de-allocating the underlying native store
     *   of the {@link java.nio.ByteBuffer}.  Call
     *   {@link JNIReference#delete()} to do that.  <strong>Warning:</strong>
     *   if you do call {@link JNIReference#delete()} on the
     *   value returned in this parameter, then the returned byte buffer
     *   will be immediately invalid.
     * @return A java.nio.ByteBuffer that directly accesses
     *   the native memory this IBuffer manages, or null if
     *   error.
     */
  public java.nio.ByteBuffer getByteBuffer(int offset, int length,
      java.util.concurrent.atomic.AtomicReference<JNIReference> referenceReturn)
  {
    java.nio.ByteBuffer retval = this.java_getByteBuffer(offset, length);
    if (retval != null)
    {
      // increment the ref count of this class to reflect the
      // byte buffer
      java.util.concurrent.atomic.AtomicLong refCount =
        this.getJavaRefCount();
      refCount.incrementAndGet();
      
      // and use the byte buffer as the reference to track
      JNIReference ref = JNIReference.createNonFerryReference(
          this,
          retval, swigCPtr, refCount);
      if (referenceReturn != null)
        referenceReturn.set(ref);
      
      // and tell Java this byte buffer is in native order
      retval.order(java.nio.ByteOrder.nativeOrder());
    }
    return retval;
  }

  /**
   * Prints the same as {@link Object#toString()} but appends
   * the maximum number of bytes that will fit in this
   * {@link IBuffer}, the type of the {@link IBuffer}, and the maximum
   * size in units of {@link IBuffer.Type} that will fit in the
   * {@link IBuffer}.
   * {@inheritDoc}
   */
  @Override
  public String toString()
  {
    final StringBuilder builder = new StringBuilder();
    builder.append(super.toString());
    builder.append("[");
    builder.append("bytes=").append(getBufferSize()).append(";");
    builder.append("type=").append(getType()).append(";");
    builder.append("size=").append(getSize()).append(";");
    builder.append("]");
    return builder.toString();
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // IBuffer.swg

  public int getBufferSize() {
    return FerryJNI.IBuffer_getBufferSize(swigCPtr, this);
  }

  public static IBuffer make(RefCounted requestor, int bufferSize) {
    long cPtr = FerryJNI.IBuffer_make__SWIG_0(RefCounted.getCPtr(requestor), requestor, bufferSize);
    return (cPtr == 0) ? null : new IBuffer(cPtr, false);
  }

  public IBuffer.Type getType() {
    return IBuffer.Type.swigToEnum(FerryJNI.IBuffer_getType(swigCPtr, this));
  }

  public void setType(IBuffer.Type type) {
    FerryJNI.IBuffer_setType(swigCPtr, this, type.swigValue());
  }

  public static int getTypeSize(IBuffer.Type type) {
    return FerryJNI.IBuffer_getTypeSize(type.swigValue());
  }

  public int getSize() {
    return FerryJNI.IBuffer_getSize(swigCPtr, this);
  }

  public static IBuffer make(RefCounted requestor, IBuffer.Type type, int numElements, boolean zero) {
    long cPtr = FerryJNI.IBuffer_make__SWIG_1(RefCounted.getCPtr(requestor), requestor, type.swigValue(), numElements, zero);
    return (cPtr == 0) ? null : new IBuffer(cPtr, false);
  }

  public java.nio.ByteBuffer java_getByteBuffer(int offset, int length) {
    return FerryJNI.IBuffer_java_getByteBuffer(swigCPtr, this, offset, length);
  }

  public byte[] getByteArray(int offset, int length) {
    return FerryJNI.IBuffer_getByteArray(swigCPtr, this, offset, length);
  }

  public static IBuffer make(RefCounted requestor, byte[] buffer, int offset, int length) {
    long cPtr = FerryJNI.IBuffer_make__SWIG_2(RefCounted.getCPtr(requestor), requestor, buffer, offset, length);
    return (cPtr == 0) ? null : new IBuffer(cPtr, false);
  }

  public static IBuffer make(RefCounted requestor, java.nio.ByteBuffer directByteBuffer, int offset, int length) {
    long cPtr = FerryJNI.IBuffer_make__SWIG_3(RefCounted.getCPtr(requestor), requestor, directByteBuffer, offset, length);
    return (cPtr == 0) ? null : new IBuffer(cPtr, false);
  }

  public enum Type {
    IBUFFER_UINT8,
    IBUFFER_SINT8,
    IBUFFER_UINT16,
    IBUFFER_SINT16,
    IBUFFER_UINT32,
    IBUFFER_SINT32,
    IBUFFER_UINT64,
    IBUFFER_SINT64,
    IBUFFER_FLT32,
    IBUFFER_DBL64,
    IBUFFER_NB;

    public final int swigValue() {
      return swigValue;
    }

    public static Type swigToEnum(int swigValue) {
      Type[] swigValues = Type.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Type swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Type() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Type(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Type(Type swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
